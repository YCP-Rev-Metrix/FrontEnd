using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MauiApp2;

public class BowlingGameViewModel : INotifyPropertyChanged
{
    private BowlingGame game;
    public ObservableCollection<BowlingFrame> Frames => new ObservableCollection<BowlingFrame>(game.Frames);

    public BowlingGameViewModel()
    {
        game = new BowlingGame();
    }
    
    //this was auto generated by the IDE bc it was mad about the INotifyPropertyChanged thing
    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    protected bool SetField<T>(ref T field, T value, [CallerMemberName] string propertyName = null)
    {
        if (EqualityComparer<T>.Default.Equals(field, value)) return false;
        field = value;
        OnPropertyChanged(propertyName);
        return true;
    }
    //end previous notes
    
    //update scores n frame shit here later
    private void updateFrameScore(string pinNum)
    {
        int frameScore = 10;

        Frames[1].frameScore = frameScore;
    }
}